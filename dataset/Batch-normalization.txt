Batch-normalization
Пакетная нормализация (англ. batch-normalization) — метод, который позволяет повысить производительность и стабилизировать работу искусственных нейронных сетей. Суть данного метода заключается в том, что некоторым слоям нейронной сети на вход подаются данные, предварительно обработанные и имеющие нулевое математическое ожидание и единичную дисперсию. Впервые данный метод был представлен в [1].
Содержание
- 1 Идея
- 2 Описание метода
- 3 Обучение нейронных сетей с пакетной нормализацией
- 4 Пакетная нормализация в свёрточных сетях
- 5 Индивидуальная нормализация
- 6 Условная пакетная нормализация
- 7 Пример
- 8 Реализации
- 9 Модификации
- 10 См. также
- 11 Примечания
- 12 Источники информации
Идея
Нормализация входного слоя нейронной сети обычно выполняется путем масштабирования данных, подаваемых в функции активации. Например, когда есть признаки со значениями отдо и некоторые признаки со значениями от до , то их необходимо нормализовать, чтобы ускорить обучение. Нормализацию данных можно выполнить и в скрытых слоях нейронных сетей, что и делает метод пакетной нормализации.
Пакет
Предварительно, напомним, что такое пакет (англ. batch). Возможны два подхода к реализации алгоритма градиентного спуска для обучения нейросетевых моделей: стохастический и пакетный[2].
- Стохастический градиентный спуск (англ. stochastic gradient descent) — реализация, в которой на каждой итерации алгоритма из обучающей выборки каким-то (случайным) образом выбирается только один объект;
- Пакетный (батч) (англ. batch gradient descent) — реализация градиентного спуска, когда на каждой итерации обучающая выборка просматривается целиком, и только после этого изменяются веса модели.
Также существует "золотая середина" между стохастическим градиентным спуском и пакетным градиентным спуском — когда просматривается только некоторое подмножество обучающей выборки фиксированного размера (англ. batch-size). В таком случае такие подмножества принято называть мини-пакетом (англ. mini-batch). Здесь и далее, мини-пакеты будем также называть пакетом.
Ковариантный сдвиг
Пакетная нормализация уменьшает величину, на которую смещаются значения узлов в скрытых слоях (т.н. ковариантный сдвиг (англ. covariance shift)).
Ковариантный сдвиг — это ситуация, когда распределения значений признаков в обучающей и тестовой выборке имеют разные параметры (математическое ожидание, дисперсия и т.д.). Ковариантность в данном случае относится к значениям признаков.
Проиллюстрируем ковариантный сдвиг примером. Пусть есть глубокая нейронная сеть, которая обучена определять находится ли на изображении роза. И нейронная сеть была обучена на изображениях только красных роз. Теперь, если попытаться использовать обученную модель для обнаружения роз различных цветов, то, очевидно, точность работы модели будет неудовлетворительной. Это происходит из-за того, что обучающая и тестовая выборки содержат изображения красных роз и роз различных цветов в разных пропорциях. Другими словами, если модель обучена отображению из множества в множество и если пропорция элементов в изменяется, то появляется необходимость обучить модель заново, чтобы "выровнять" пропорции элементов в и . Когда пакеты содержат изображения разных классов, распределенные в одинаковой пропорции на всем множестве, то ковариантный сдвиг незначителен. Однако, когда пакеты выбираются только из одного или двух подмножеств (в данном случае, красные розы и розы различных цветов), то ковариантный сдвиг возрастает. Это довольно сильно замедляет процесс обучения модели. На Рисунке изображена разница в пропорциях.
Простой способ решить проблему ковариантного сдвига для входного слоя — это случайным образом перемешать данные перед созданием пакетов. Но для скрытых слоев нейронной сети такой метод не подходит, так как распределение входных данных для каждого узла скрытых слоев изменяется каждый раз, когда происходит обновление параметров в предыдущем слое. Эта проблема называется внутренним ковариантным сдвигом (англ. internal covariate shift). Для решения данной проблемы часто приходится использовать низкий темп обучения (англ. learning rate) и методы регуляризации при обучении модели. Другим способом устранения внутреннего ковариантного сдвига является метод пакетной нормализации.
Свойства пакетной нормализации
Кроме того, использование пакетной нормализации обладает еще несколькими дополнительными полезными свойствами:
- достигается более быстрая сходимость моделей, несмотря на выполнение дополнительных вычислений;
- пакетная нормализация позволяет каждому слою сети обучаться более независимо от других слоев;
- становится возможным использование более высокого темпа обучения, так как пакетная нормализация гарантирует, что выходы узлов нейронной сети не будут иметь слишком больших или малых значений;
- пакетная нормализация в каком-то смысле также является механизмом регуляризации: данный метод привносит в выходы узлов скрытых слоев некоторый шум, аналогично методу dropout;
- модели становятся менее чувствительны к начальной инициализации весов.
Описание метода
Опишем устройство метода пакетной нормализации. Пусть на вход некоторому слою нейронной сети поступает вектор размерности: . Нормализуем данный вектор по каждой размерности :
,
где математическое ожидание и дисперсия считаются по всей обучающей выборке. Такая нормализация входа слоя нейронной сети может изменить представление данных в слое. Чтобы избежать данной проблемы, вводятся два параметра сжатия и сдвига нормализованной величины для каждого: , — которые действуют следующим образом:
.
Данные параметры настраиваются в процессе обучения вместе с остальными параметрами модели.
Пусть обучение модели производится с помощью пакетовразмера : . Здесь нормализация применяется к каждому элементу входа с номером отдельно, поэтому в индекс опускается для ясности изложения. Пусть были получены нормализованные значения пакета . После применения операций сжатия и сдвига были получены . Обозначим данную функцию пакетной нормализации следующим образом:
Тогда алгоритм пакетной нормализации можно представить так:
Вход: значенияиз пакета ; настраиваемые параметры ; константа для вычислительной устойчивости. Выход: // математическое ожидание пакета // дисперсия пакета // нормализация // сжатие и сдвиг
Заметим, что еслии , то равен , то есть является тождественным отображением. Таким образом, использование пакетной нормализации не может привести к снижению точности, поскольку оптимизатор просто может использовать нормализацию как тождественное отображение.
Обучение нейронных сетей с пакетной нормализацией
Для обучения нейронных сетей необходимо вычислять градиент функции потерь . В случае использования метода пакетной нормализации градиент вычисляется следующим образом:
На Рисунке граф вычислений слоя пакетной нормализации алгоритмом обратного распространения ошибки.изображен
В прямом направлении, как и описано в алгоритме метода, из входавычисляется среднее значение по каждой размерности признакового пространства. Затем полученный вектор средних значение вычитается из каждого элемента обучающей выборки. Далее вычисляется дисперсия, и с помощью нее вычисляется знаменатель для нормализации. Затем полученное значение инвертируется и умножается на разницу входа и средних значений. В конце применяются параметры и .
В обратном направлении вычисляются производные необходимых функций. В следующей таблице подробнее изображены шаги вычисления градиента функции потерь (иллюстрации из статьи, здесь и ):
Пакетная нормализация в свёрточных сетях
Пакетная нормализация может быть применена к любой функции активации. Рассмотрим подробнее случай аффинного преобразования с некоторой нелинейной функцией:
,
где cигмоида или ReLU. Данной функцией можно описать как обычные, так и сверточные слои нейронных сетей. Пакетная нормализация применяется сразу перед функцией к . Параметр может быть опущен, так как в дальнейших вычислениях его роль будет играть параметр . Поэтому может быть записано так:и — настраиваемые параметры модели, а — некоторая нелинейная функция, например
,
гдеприменяется отдельно к каждой размерности с отдельной парой параметров и для каждой размерности.
В случае свёрточных сетей, дополнительно необходима нормализация, чтобы удовлетворить свойство свёрточных сетей, что различные элементы в разных местах одной карты признаков (образ операции свёртки, англ. feature map) должны быть нормализованы одинаково. Чтобы этого добиться, нормализация выполняется совместно над всеми значениями в пакете. Пусть— множество всех значений в карте признаков по всему пакету и всем точкам в карте признаков. Тогда для пакета размера и карты признаков размера размер равен . Тогда параметры и настраиваются для каждой карты признаков отдельно.
Индивидуальная нормализация
При пакетной нормализации происходит усреднение параметров по всему пакету. Например, в случае задачи переноса стилей картин, это вносит много шума. При усреднении теряются индивидуальные характеристики объектов. Поэтому используется более тонкая нормализация — индивидуальная нормализация (англ. instance normalization). Разница заключается в том, что нормализация происходит по каждому отдельному объекту, а не по всему пакету. Для примера, усреднение происходит по пикселям картины, но не по всем картинам в пакете, как видно на Рисунке.
Условная пакетная нормализация
Условная пакетная нормализация (англ. conditional batch normalization, CBN) — метод, который позволяет "выбирать" параметры пакетной нормализации ([3]. Позднее он был использован для пакетной нормализации в Modulating early visual processing by language[4].и ) в зависимости от какого-то состояния сети, например метки класса. Впервые данный метод был представлен для индивидуальной нормализации в A Learned Representation for Artistic Style
Зачем нужно делать параметры нормализации зависимостью? На практике было выяснено [3], что иногда нейронные сети, натренированные решать разные задачи из одного класса, имеют схожие веса и достаточно лишь слегка поменять параметры сжатия и сдвига после каждого слоя. Таким образом, добавив условную нормализацию, мы научимся решать сразу несколько задач используя одну сеть.
Описание метода
Самая важная часть метода — выбрать для входа описанием метода пакетной нормализации:параметры и . Возможные способы сделать это описаны ниже. Единожды параметры выбраны, формула не отличается от приведённой в параграфе c
.
Выбор параметров нормализации
Есть несколько способов выбрать параметры. Самой простой из них — разделить предметную область начастей. Для каждого слоя надо добавить соответствующие параметры и настраивать их вместе с остальными параметрами модели. Когда мы тренируем на данных из -ой части, мы явно указываем, что в формуле . Когда мы хотим осуществить предсказание, мы снова явно указываем желаемый и в вычислениях используются соответствующие параметры.
Есть другой способ: можно вместе с настройкой сети обучать алгоритм выбора параметров Modulating early visual processing by language в качестве используется многослойный перцептрон по Румельхарту с одним скрытым слоем. Таким образом, характеристики могут изменить выход целого слоя. Это бывает полезно, если верна гипотеза, что структура входных векторов связана с желаемым результатом работы.сжатия и сдвига по заданному входу: . К примеру, в работе
В применении к переносу стиля
Популярной задачей является отрисовка данного изображения в стиле какой-то заданной картины, как на Рисунке "перенос стиля". Одно из популярных и достаточно быстрых решений этой задачи использует простые нейронные сети прямого распространения. Это решение имеет недостаток: каждая сеть может переносить лишь один стиль. Если мы хотим научиться переносить стилей, то надо обучать различных сетей. Однако лишь небольшое количество параметров этих сетей отвечает за индивидуальные особенности стиля. Хотелось бы уметь переиспользовать остальные параметры.. Эта задача называется
Добавление условности
В статье A Learned Representation for Artistic Style был получен удивительный результат: для моделирования какого-то стиля, достаточно специализировать параметры сжатия и сдвига нормализации для каждого конкретного стиля. Таким образом, давайте для каждого изображения стиля будем учитывать свои и . Получается, у нас будет лишь два вектора параметров, специфичных для каждого стиля, а все остальные — общие.
Такой подход имеет много преимуществ по сравнению с наивным:
- Это быстрее.
- Это требует меньше памяти.
- Легче добавить новый стиль: достаточно взять текущие веса, добавить новые параметры сжатия и сдвига и дообучить. Веса, скорее всего, уже были близки к оптимальным и дообучение не будет долгим.
- Можно комбинировать новые стили за счёт выпуклой комбинации существующих коэффициентов сжатия и сдвига.
Когда использовать условную нормализацию?
Во-первых, на условную нормализацию стоит обратить внимание, если вы настраиваете много сетей, решающих похожие задачи. Возможно, в этом случае вы можете использовать одну сеть с условными параметрами нормализации, зависящими от конкретной задачи. Например, при переносе стилей вместосетей вы настраиваете одну сеть с наборами параметров нормализации.
Во-вторых, если вы подозреваете, что информация о структуре входных векторов имеет значение для выхода. Например, имеет смысл "слить" лингвистическую информацию и характеристики изображения для задачи ответа на визуальные вопросы (англ. Visual Question Answering, VQA).
Однако во всех случаях надо помнить, что полученные алгоритмы для разных задач будут различаться лишь параметрами свёртки и сжатия. Иначе говоря, если ваши задачи нельзя выразить аффинной комбинацией параметров сети после нормализации, условная нормализация не поможет.
Пример
Приведем пример демонстрирующий работу пакетной нормализации. Рассмотрим задачу распознавания рукописных цифр на известном датасете MNIST [5]. Для решения задачи будет использоваться обычная нейронная сеть с скрытыми полносвязными слоями по узлов в каждом. Функция активации — ReLU. Выходной слой содержит узлов. Размер пакета равен . Сравниваются две одинаковые модели, но в первой перед каждым скрытым слоем используется пакетная нормализация, а во второй — нет. Темп обучения равен . Веса инициализированы значениями с малой дисперсией.
На Рисункеизображены два графика, показывающие разницу между моделями. Как видно, обе модели достигли высокой точности, но модель с использованием пакетной нормализации достигла точности более быстрее, почти сразу, и достигла максимума, примерно, уже на итераций. Однако, модель без пакетной нормализации достигла скорости обучения примерно пакетов в секунду, а модель с использованием пакетной нормализации — . Однако, как можно видеть, пакетная нормализация позволяет выполнить меньшее количество итераций и, в итоге, сойтись за меньшее время.
На Рисункеизображен график, сравнивающий точно такие же модели, но с использованием сигмоиды в качестве функции активации. Такая конфигурация моделей требует большего времени, чтобы начать обучение. В итоге, модель обучается, но на это потребовалось более итераций, чтобы получить точность более . При использовании пакетной нормализации получилось достичь точность более примерно за итераций.
Реализации
Механизм пакетной нормализации реализован практически во всех современных инструментариях для машинного обучения, таких как: TensorFlow [6], Keras [7], CNTK [8], Theano [9], PyTorch [10] и т.д.
Приведем пример[11] применения пакетной нормализации с использованием библиотеки TensorFlow на языке программирования Python [12]:
import tensorflow as tf # ... is_train = tf.placeholder(tf.bool, name="is_train"); # ... x_norm = tf.layers.batch_normalization(x, training=is_train) # ... update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS) with tf.control_dependencies(update_ops): train_op = optimizer.minimize(loss)
Модификации
Существует несколько модификаций и вариаций метода пакетной нормализации:
- Тим Койманс[13] в 2016 г. предложил способ применения пакетной нормализации к рекуррентным нейронным сетям;
- Расширение метода пакетной нормализации было предложено Ликси Хуангом[14] в 2018 г. Метод получил название декоррелированная пакетная нормализация (англ. Decorrelated Batch Normalization). В данном методе кроме операций масштабирования и сдвига была предложено использование специальной функции затирания данных;
- Джимми Лей Ба[15] в 2016 г. предложил метод нормализации слоев (англ. Layer Normalization), который решает проблему выбора размера пакета;
- В работе Сергея Иоффе[16] в 2017 г. было представлено расширение метода пакетной нормализации: пакетная ренормализация (англ. Batch Renormalization). Данный метод улучшает пакетную нормализацию, когда размер пакетов мал и не состоит из независимых данных;
- Метод потоковой нормализации (англ. Streaming Normalization) был предложен Кифэном Ляо[17] в 2016 г. Данный метод убирает два ограничения пакетной нормализации: использование при online-обучении и использование в рекуррентных нейронных сетях.
См. также
Примечания
-  Ioffe S., Szegedy C. — Batch normalization: Accelerating deep network training by reducing internal covariate shift, 2016
-  Метод стохастического градиента
-  3,0 3,1 3,2 A Learned Representation for Artistic Style
-  Modulating early visual processing by language
-  Датасет MNIST
-  TensorFlow
-  Keras
-  CNTK
-  Theano
-  PyTorch
-  Batch normalization: theory and how to use it with Tensorflow
-  Язык программирования Python
-  Cooijmans T. — Recurrent batch normalization, 2016
-  Huang L. — Decorrelated Batch Normalization, 2018
-  Ba J. L., Kiros J. R., Hinton G. E. — Layer normalization, 2016
-  Ioffe S. — Batch renormalization: Towards reducing minibatch dependence in batch-normalized models, 2017
-  Liao Q., Kawaguchi K., Poggio T. — Streaming normalization: Towards simpler and more biologically-plausible normalizations for online and recurrent learning, 2016
Источники информации
- Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift
- Glossary of Deep Learning: Batch Normalisation
- Understanding the backward pass through Batch Normalization Layer
- Deeper Understanding of Batch Normalization with Interactive Code in Tensorflow
- Batch Normalization in Deep Networks
- Batch Normalization — Lesson
- A Learned Representation for Artistic Style