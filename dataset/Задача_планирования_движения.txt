Задача планирования движения
Планирование движения (также известное как планирование пути и проблема навигации) — это вычислительная задача поиска последовательности допустимых конфигураций, которая перемещает объект от источника к месту назначения.
Содержание
- 1 Постановка задачи
- 2 Этапы
- 3 Предсказание траекторий движения объектов
- 4 Решение задачи для беспилотных автомобилей (англ. Self-driving cars)
- 5 Области применения
- 6 См. также
- 7 Примечания
- 8 Источники информации
Постановка задачи
Пусть задано непустое множество препятствий кинематическая цепь , где — множество твердотельных звеньев (элементов кинематической цепи), а — множество кинематических ограничений таких, что при корректной конфигурации цепи предикаты ограничений принимают истинное значение. Под конфигурацией здесь понимается набор значений параметров, однозначно определяющий положение точек объекта в пространстве сцены. Обычно используется минимальный набор параметров, соответствующий количеству степеней свободы объекта и определяющий пространство состояний или конфигурационное пространство объекта .в области евклидова пространства . Пусть также задано твердое тело , либо
|Определение:
|Пространством допустимых состоянийназовем множество всех конфигураций объекта , удовлетворяющих кинематическим ограничениям и исключающих столкновения с препятствиями сцены. для кинетической цепи; для простого твердого тела.
Тогда постановка задачи поиска пути может быть сформулирована следующим образом. Для пары заданных бесконфликтных конфигураций требуется найти непрерывный путь такой, что и , где — момент времени.
Поскольку планирование маршрута, как правило, допускает бесконечное множество решений (хотя может не существовать ни одного решения), иногда данную задачу формулируют в постановке оптимизационной задачи с целевой функцией, соответствующей минимальной длине маршрута или максимальной удаленности перемещаемого объекта от препятствий. На практике поиск пути даже в простых сценах с относительно небольшим количеством препятствий становится трудноразрешимой задачей, если перемещаемый объект имеет сложную геометрию или высокое число степеней свободы. В современных индустриальных приложениях часто требуется моделировать поведение сложных кинематических систем с шестью и более степенями свободы в статическом или динамическом окружении, насчитывающим тысячи препятствий.
Этапы
Восприятие/анализ обстановки (англ. Perception)
Анализ данных об окружении, выделение объектов и препятствий, определение их размеров, скоростей, и расстояний до них. Зачастую осуществляется путем применения алгоритмов машинного обучения для распознавания объектов на изображениях и прочих массивах данных (таких как данные с датчиков).
Предсказание движения объектов (англ. Prediction)
Анализ собранных за время наблюдения данных об окружающих объектах для последующего построение модели их движения и предсказания их траекторий. Этот этап будет подробно рассмотрен далее.
Принятие решения/планирование траектории движения (англ. Planning)
Построение потенциальных траекторий движения и выбор итоговой на основе собранных на предыдущих этапах данных. Как правило осуществляется с помощью дискретизации пространства и последующего применения алгоритмов на графах, например различных вариаций RRT алгоритмов, для поиска оптимальной траектории. В последнее время также становятся более актуальными решения с применением машинного обучения — в частности, подходы на основе имитационного обучения и обратного обучения с подкреплением[6][7], обученные на большом количестве примеров, предоставленных человеком[2].
Предсказание траекторий движения объектов
Поскольку в общем случае мы не можем определить, как будут двигаться объекты, для предсказания траекторий их движений необходимо строить модели на основе прошлых измерений. Эти модели могут представлять из себя как простые предсказания (например, “объект продолжит двигаться с неизменной скоростью/ускорением”), так и более сложные алгоритмы.
Стандартный подход
Одна из основных сложностей в предсказании траекторий движения объектов заключается в неопределенности, которая появляется из-за погрешностей в измерениях сенсоров и невозможности однозначно предсказать действия объектов. Для смягчения этой проблемы применяются фильтры, которые приближают текущую позицию исходя из измерений сенсоров и наших предсказаний, а также степени уверенности в результатах обоих.
Также проблематичным является тот факт, что одной модели (особенно простой) как правило недостаточно для описания траектории движения объекта. В связи с этим существует алгоритм, использующий множество взаимодействующих моделей (англ. Interacting Multiple Model, IMM) — подход применения сразу нескольких моделей, для каждой из которых поддерживается актуальная (меняющаяся по мере прошествия времени и получения новых измерений) вероятность того, что объект двигается согласно этой модели. Таким образом, используя, например, модель для каждого возможного движения, такого как поворот или ускорение, мы можем делать более точные предположения о том, где объект будет находиться в будущем.
Существуют и другие, более специализированные, подходы, опирающиеся на ряд заранее заданных правил, моделей и предположений об используемом пространстве.
Применение машинного обучения
Стандартные инженерные подходы (в том числе IMM) также обладают своими недостатками как в точности (особенно при необходимости долговременного предсказания), так и в скорости, в связи с чем стали применяться и подходы, использующие машинное обучение, в частности — рекуррентные нейронные сети.
Они применяются как для улучшения производительности самого алгоритма IMM (например, для улучшения точности в пересчете вероятностей[10]), так и для его замены (иногда применяя тот же самый принцип[11]).
Существуют и другие алгоритмы, основанные на машинном обучении (в основном использующие сверточные нейронные сети), и не опирающиеся на принцип работы IMM, вместо этого по большей части использующие большие массивы данных, собранные на основе передвижений автомобилей, которые управлялись людьми вручную[12][13][14].
Решение задачи для беспилотных автомобилей (англ. Self-driving cars)
Для организации управления беспилотным автомобилем можно воспользоваться классическим подходом из робототехники. Задача самостоятельного передвижения разбивается на четыре модуля.
- Модуль локализации отвечает за определение положения автомобиля в пространстве.
- Модуль распознавания — за анализ окружающей обстановки.
- Модуль планирования — за планирование маршрута исходя из обстановки и цели.
- Модуль управления — за определение траектории движения в выбранном направлении.
Тем не менее такая модель все еще имеет множество проблем, которые необходимо решить. Автомобиль обладает рядом довольно существенных ограничений. У автомобиля есть текущее направление, угол поворота колес, и он не может просто оказаться на два метра левее от текущего местоположения, это очень сложно. Он может ехать примерно вперед, поворачивая на какой-то угол, но тем не менее, перемещение очень сильно ограничено. И на траекторию движения влияют ограничениям, которые следуют из кинематики. Например, невозможно мгновенно разогнаться и мгновенно увеличить свое ускорение.
Для планирования дальнейшего движения автомобиля можно использовать нейронные сети, передавая информацию со всех датчиков и камер в сеть, предварительно ее обучив на человеческих перемещениях. Обучить, в каких ситуациях куда нужно крутить руль, увеличивать или снижать скорость. В теории такой подход представляется хорошим решением задачи, но на практике выяснилось, что нужно слишком много данных и слишком большая нейросеть, чтобы успешно повторять все за человеком в различных ситуациях. В этом направлении ведется активная работа, и пока большинство успешных решений задачи опирается на нейросети лишь частично, доверяя бо`льшую часть работы проверенным алгоритмам.
Алгоритмы на графах
Существует несколько алгоритмов на графах, позволяющих решить задачу, но для их использования нужно понять, как построить граф по имеющейся информации. Для этого аналогично существует несколько подходов:
- Разбиение пространства на клетки и построение графа на них.
- Построение графа из регулярных примитивов движения (например, дуг).
- Другие, более специализированные подходы, основанные на особенностях конкретной системы.
Самым популярным и зачастую самым оптимальным является алгоритм А*.
Преимущества:
- Гарантированно находит кратчайший (в дискретизированном пространстве) путь.
Недостатки:
- В пространствах малой размерности путь редко является кинематически выполнимым (зависит от метода построения графа).
- В пространствах большой размерности наблюдается заметное увеличение времени работы.
Оптимизационные алгоритмы
Идея оптимизационных алгоритмов заключается в следующем: рассмотрим траекторию нашего положения во времени, и — координаты, зависящие от времени , то есть поймем, в какой точке мы хотим оказаться в момент времени . Можно сказать, что оптимальной в этом случае будет траектория, которая минимизирует функционал , являющийся интегралом некоторой функции от траектории по времени.
, где — траектория.
Функция от траекторииздесь каким-либо образом нас штрафует за резкие повороты, резкие разгоны, нахождение близко к препятствиям. Тогда, если просуммировать вдоль траектории все необходимые штрафы и попытаться это минимизировать с помощью стандартного математического аппарата, никак не связанного с автомобилями в целом и беспилотными автомобилями в частности, это решит задачу в общем виде.
Что лучше рассмотреть в качестве штрафов? Например, можно сказать, что не нужно подъезжать близко к препятствиям, учитывать это с каким-то весом, или что скорость не должна быть гораздо выше или ниже заранее определенной скорости. Можно штрафовать за вторую производную, которая является ускорением, потому что машина не должна резко ускоряться или замедляться.
Можно рассмотреть третью производную, которая является рывком, то есть не нужно, чтобы ускорение тоже менялось достаточно резко, поскольку это может сказаться на состоянии пассажиров. Если ускорение фиксированное и машина просто все время разгоняется, то, как показывают исследования, людей не укачивает. Также можно избегать крутых поворотов, ограничивая угол. Есть дополнительные ограничения, которые говорят, что машина физически не может разгоняться быстрее какого-то ускорения. Если все это учтется, то можно решить задачу с помощью абстрактного алгоритма минимизации функции и получить некий результат.
Большинство методов оптимизации предпочитают работать с хорошо дифференцируемыми функциями, в то время как автомобиль — объект довольно сложной формы, и препятствия, которые он объезжает, это тоже объекты непростых форм. Поэтому нужно производить какие-то упрощения. Например, можно сказать, что машина — не что-то сложное, а просто пять окружностей.
От окружностей очень легко считать расстояния до чего угодно и очень легко проверять окружность на пересечения с остальными геометрическими примитивами. Если расстояние до центра меньше, чем радиус, можно утверждать, что объекты пересекаются.
Что нужно, чтобы плавно изменялось расстояние? Евклидово расстояние до невыпуклых многоугольников не обладает необходимыми свойствами и плохо дифференцируемо в местах, где наблюдается отсутствие выпуклости. Поэтому можно построить псевдорасстояние по градиентному полю до ломаной, которая обозначена на Рис. 10 красным и представляет собой препятствие. Введем поле расстояний от каждой точки до этой ломаной, которое направлено в сторону ломаной и обладает необходимыми свойствами дифференцируемости — пусть и не являясь строго кратчайшим. Это позволит построить гладкую и аккуратную траекторию.
Преимущества:
- Пространство управления непрерывно.
Недостатки:
- Сходится к локальным минимумам.
- Ограничения должны быть заданы дифференцируемыми функциями.
Стохастические алгоритмы
Существуют также стохастические алгоритмы, которые работают некоторым случайным образом и позволяют построить приближенный маршрут достаточно быстро и удобно. Алгоритм не ищет оптимальные способы объехать препятствие, а просто в разных направлениях исследует пространство, но каждый раз делая это из наиболее исследованного участка к наименее изученному.
Самым распространенным стохастическим алгоритмом является построение быстро исследующего случайного дерева (Rapidly-exploring Random Tree, RRT) или деревьев на его основе (RRT*[17] и прочие).
Принцип заключается в итеративном построении дерева. На каждой итерации происходят следующие действия:
- Выбор случайной точки пространства.
- Нахождения ближайшего к этой точке узла уже построенного дерева.
- Построение ребра в сторону новой точки с помощью симуляции проезда нескольких метров.
В результате достаточно быстро строится карта путей, которая некоторым (вероятнее всего, не оптимальным) образом покрывают пространство. Можно продолжать ее строить до тех пор, пока не найдется путь до искомой точки или пока не будет сочтено нужным остановиться.
Преимущества:
- Высокая скорость работы в пространствах большой размерности.
- Пути можно подавать практически напрямую в управляющий блок.
Недостатки:
- Отсутствие гарантий на оптимальность.
- Высокая вероятность того, что траектория движения будет сильно извилистой (зависит от выбора дерева; например, RRT* лишен этого недостатка).
Специализированные алгоритмы
В городе нет абстрактных точек А и Б и неструктурированного окружения со случайными препятствиями. На подобных сценах все относительно понятно: есть конкретные полосы и движение машины почти всегда заключается в том, что автомобиль едет примерно по центру полосы; иногда смещается левее или правее, чтобы объехать препятствие; иногда перестраивается, чтобы по правилам дорожного движения повернуть в нужном направлении.
В связи с этим не всегда есть необходимость в деревьях (хотя они все еще нужны, например, во время парковки или сложных маневров). Когда автомобиль едет на полосе, ему достаточно построить сравнительно плавную траекторию, следующую к центру этой полосы или с каким-то смещением влево/вправо. Это сделать гораздо проще, чем искать путь в графе. Поэтому простым решением будет взять текущее положение машины, посмотреть на путь, по которому хотелось бы ехать, и плавно свернуть на этот путь.
Области применения
- Роботизированная хирургия — хирургия с использованием робота во время операции. Поскольку один из способов проведения такого рода операций — автоматический, возникает необходимость решения задачи планирования движения робота.
- Компьютерная анимация — вид трехмерной анимации, создаваемый при помощи компьютерной графики. Процедурная анимация полностью или частично рассчитывается компьютером, например:
- Симуляция физического взаимодействия твёрдых тел.
- Имитация движения систем частиц, жидкостей и газов.
- Имитация взаимодействия мягких тел (ткани, волос).
- Расчёт движения иерархической структуры связей (скелета персонажа) под внешним воздействием.
- Имитация автономного движения персонажа.
- Фолдинг белка — процесс спонтанного свертывания полипептидной цепи в уникальную пространственную структуру. Механизм сворачивания белков до конца не изучен, но аминокислотная последовательность белка обычно известна. Поэтому учёные пытаются использовать различные биофизические методы, чтобы предсказать пространственную структуру белка.
См. также
- Сверточные нейронные сети
- Рекуррентные нейронные сети
- Алгоритм A*
- Задача нахождения объектов на изображении
- Анализ видео
Примечания
-  1,0 1,1 Казаков К.А. и Семенов В.А. (2016) "Обзор современных методов планирования движения"
-  2,0 2,1 Peter Ondruska, Sammy Omari (2020) "The Next Frontier in Self-Driving: Using Machine Learning to Solve Motion Planning"
-  Christoph Hammerschmidt (2020) "Deep learning method improves environment perception of self-driving cars"
-  Sacha Arnoud, Peter Ondruska (2020) "Fueling Self-Driving Research with Level 5’s Open Prediction Dataset"
-  Robert Morgan, Mason Lee (2020) "Virtual Validation: A Scalable Solution to Test & Navigate the Autonomous Road Ahead"
-  Alexandre Gonfalonieri (2018) "Inverse Reinforcement Learning — Introduction and Main Issues"
-  Abbeel P., Ng A.Y. (2011) "Inverse Reinforcement Learning"
-  "Tracking Maneuvering Targets", MathWorks
-  Jongwon Park, Jaeho Choi, Kunsoo Huh (2019) "Interacting Multiple Model Filter for Multi-Sensor Data Fusion System"
-  Lichuan Deng, Da Li and Ruifang Li (2020) "Improved IMM Algorithm based on RNNs"
-  Stefan Becker, Ronny Hug, Wolfgang Hübner, and Michael Arens (2019) "An RNN-based IMM Filter Surrogate"
-  Nemanja Djuric, Vladan Radosavljevic, Henggang Cui, Thi Nguyen, Fang-Chieh Chou, Tsung-Han Lin, Nitin Singh, Jeff Schneider (2020) "Uncertainty-aware Short-term Motion Prediction of Traffic Actors for Autonomous Driving"
-  Henggang Cui, Thi Nguyen, Fang-Chieh Chou, Tsung-Han Lin, Jeff Schneider, David Bradley, Nemanja Djuric (2020) "Deep Kinematic Models for Kinematically Feasible Vehicle Trajectory Predictions"
-  Mustafa Ozan Tezcan (2017) "Motion Estimation Using Convolutional Neural Networks"
-  15,0 15,1 15,2 Клюев Л. (2017) "Алгоритмы построения пути для беспилотного автомобиля. Лекция Яндекса", Хабр
-  Rapidly-exploring random tree
-  Tim Chin (2019) "Robotic Path Planning: RRT and RRT*: Exploring the optimized version of a orthodox path planning algorithm"
Источники информации
- "Motion Planning", Wikipedia
- Казаков К.А. и Семенов В.А. (2016) "Обзор современных методов планирования движения"
- Клюев Л. (2017) "Алгоритмы построения пути для беспилотного автомобиля. Лекция Яндекса", Хабр
- Brian Douglas (2019) "Understanding Sensor Fusion and Tracking, Part 4: Tracking a Single Object With an IMM Filter", YouTube
- Brian Douglas (2020) "Autonomous Navigation, Part 4: Path Planning with A* and RRT", YouTube