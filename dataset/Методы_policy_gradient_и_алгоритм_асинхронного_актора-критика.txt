Методы policy gradient и алгоритм асинхронного актора-критика
В алгоритме Q-learning агент обучает функцию полезности действия . Стратегия агента определяется согласно текущим значениям с использованием жадного, -жадного или softmax подхода. Однако существуют методы, которые позволяют оптимизировать стратегию напрямую. Такие алгоритмы относятся к классу алгоритмов policy gradient.
Содержание
- 1 Простой policy gradient алгоритм (REINFORCE)
- 2 Преимущества и недостатки policy gradient по сравнению с Q-learning
- 3 Усовершенствования алгоритма
- 4 Алгоритм актора-критика с преимуществом (англ. Advantage Actor Critic, A2C)
- 5 См. также
- 6 Ссылки
Простой policy gradient алгоритм (REINFORCE)
Рассмотрим Марковский процесс принятия решений (МППР), имеющий терминальное состояние. Задача — максимизировать сумму всех выигрышей, где T — шаг, на котором произошел переход в терминальное состояние.
Будем использовать буквудля обозначения некоторого сценария — последовательности состояний и произведенных в них действий: . Будем обозначать сумму всех выигрышей, полученных в ходе сценария, как .
Не все сценарии равновероятны. Вероятность реализации сценария зависит от поведения среды, которое задается вероятностями перехода между состояниями, распределением начальных состояний и поведения агента, которое определяется его стохастической стратегией . Вероятностное распределение над сценариями, таким образом, задается как
- ,
Мы предполагаем, что вероятности переходов между состояниями агенту неизвестны, то есть у агента нет модели поведения окружающей среды (model-free learning).
Нам нужно выбрать такой набор параметров агента, задающий , чтобы максимизировать матожидание суммы полученных выигрышей:
- ,
Пусть мы хотим максимизировать функциюметодом градиентного подъема. Для этого нам необходимо уметь рассчитывать ее градиент:
- ,
Мы не можем подсчитатьнапрямую, потому что в выражение для входят вероятности переходов между состояниями, которые агенту неизвестны. Однако, так как
- ,
то мы можем заменитьна :
- ,
Рассмотрим:
- ,
Тогда:
- ,
Подставляя в определение:
- ,
Заметим, что в получившееся выражение дляуже не входят напрямую значения и , которые нам неизвестны. Таким образом, если у нас есть в наличии сценарий и соответствующее ему значение , мы можем вычислить величину . Значит, если у нас есть выборка из уже известных сценариев , полученная из распределения , то мы можем приблизить посчитать приблизительное значение по методу Монте-Карло — вычислив выборочное среднее случайной величины:
- ,
Осталось понять, как получить несмещенную выборку сценариевиз вероятностного распределения . Однако это очень просто — нам всего лишь нужно зафиксировать параметр и провзаимодействовать со средой, так как распределение задает именно вероятность реализации сценария при взаимодействии агента с фиксированной стратегией со средой.
Таким образом, оптимизироватьможно с помощью следующего простого алгоритма (REINFORCE):
- Прогнать сценариев со стратегией ;
- Посчитать среднее арифметическое ;
- ;
- Если не сошлись к экстремуму, повторить с пункта 1.
Интуитивное объяснение принципа работы
— это вероятность того, что будет реализован сценарий при условии параметров модели , т. е. функция правдоподобия. Нам хочется увеличить правдоподобие "хороших" сценариев (обладающих высоким ) и понизить правдоподобие "плохих" сценариев (с низким ).
Взглянем еще раз на полученное определение градиента функции полного выигрыша:
- ,
Двигаясь вверх по этому градиенту, мы повышаем логарифм функции правдоподобия для сценариев, имеющих большой положительный.
Преимущества и недостатки policy gradient по сравнению с Q-learning
Преимущества:
- Легко обобщается на задачи с большим множеством действий, в том числе на задачи с непрерывным множеством действий;
- По большей части избегает конфликта между эксплуатацией (exploitation) и исследованием (exploration), так как оптимизирует напрямую стохастическую стратегию ;
- Имеет более сильные гарантии сходимости: если Q-learning гарантированно сходится только для МППР с конечными множествами действий и состояний, то policy gradient, при достаточно точных оценках (т. е. при достаточно больших выборках сценариев), сходится к локальному оптимуму всегда, в том числе в случае бесконечных множеств действий и состояний, и даже для частично наблюдаемых Марковских процессов принятия решений (ЧНМППР, англ. partially observed Markov decision process, POMDP).
Недостатки:
- Очень низкая скорость работы — требуется большое количество вычислений для оценки
по методу Монте-Карло, так как:
- для получения всего одного семпла требуется произвести взаимодействий со средой;
- случайная величина имеет большую дисперсию, так как для разных значения могут очень сильно различаться, поэтому для точной оценки требуется много семплов;
- cемплы, собранные для предыдущих значений , никак не переиспользуются на следующем шаге, семплирование нужно делать заново на каждом шаге градиентного спуска.
- В случае конечных МППР Q-learning сходится к глобальному оптимуму, тогда как policy gradient может застрять в локальном.
Далее мы рассмотрим способы ускорения работы алгоритма.
Усовершенствования алгоритма
Опорные значения
Заметим, что если- константа относительно , то
- ,
так как
- ,
Таким образом, изменениена константу не меняет оценку . Однако дисперсия зависит от :
- ,
поэтому, регулируя, можно достичь более низкой дисперсии, а значит, более быстрой сходимости метода Монте-Карло к истинному значению . Значение называется опорным значением. Способы определения опорных значений будут рассмотрены далее, в рамках рассмотрения алгоритма актора-критика (Actor-Critic).
Использование будущего выигрыша вместо полного выигрыша
Рассмотрим еще раз выражение для градиента полного выигрыша:
- ,
Так как в момент времениот действия зависят только для , это выражение можно переписать как
- ,
Величина— будущий выигрыш (reward-to-go) на шаге в сценарии
Алгоритм актора-критика с преимуществом (англ. Advantage Actor Critic, A2C)
Из предыдущего абзаца:
- ,
Здесь— оценка будущего выигрыша из состояния при условии действия , которая базируется только на одном сценарии . Это плохое приближение ожидаемого будущего выигрыша — истинный ожидаемый будущий выигрыш выражается формулой
- ,
Также, в целях уменьшения дисперсии случайной величины, введем опорное значение для состояния, которое назовем ожидаемой ценностью (value) этого состояния. Ожидаемая ценность состояния — ожидаемый будущий выигрыш при совершении некоторого действия в этом состоянии согласно стратегии :
- ,
Таким образом, вместо ожидаемого будущего выигрыша при оценкебудем использовать функцию преимущества (advantage):
- ,
Преимущество действияв состоянии — величина, характеризующая то, насколько выгоднее в состоянии выбрать именно действие .
Итого:
- ,
Как достаточно точно и быстро оценить? Сведем задачу к оценке :
- ,
- ,
Теперь нам нужно уметь оценивать. Мы можем делать это, опять же, с помощью метода Монте-Карло — так мы получим несмещенную оценку. Но это будет работать не существенно быстрее, чем обычный policy gradient. Вместо этого заметим, что при фиксированных и выполняется:
- ,
Таким образом, если мы имеем некоторую изначальную оценкудля всех , то мы можем обновлять эту оценку путем, аналогичным алгоритму Q-learning:
- ,
Здесь— коэффициент обучения (learning rate) для функции ценности. Такой пересчет мы можем производить каждый раз, когда агент получает вознаграждение за действие. Так мы получим оценку ценности текущего состояния, не зависящую от выбранного сценария развития событий , а значит, и оценка функции преимущества не будет зависеть от выбора конкретного сценария. Это сильно снижает дисперсию случайной величины , что делает оценку достаточно точной даже в том случае, когда мы используем всего один сценарий для ее подсчета:
- ,
На практике же мы можем аппроксимироватьна каждом шаге (в онлайне), основываясь на всего одном действии каждый раз. Алгоритм в итоге будет следующим:
- производим действие , переходим в состояние и получаем вознаграждение ;
- ;
- ;
- ;
- ;
- Если не сошлись к экстремуму, повторить с пункта 1.
Такой алгоритм называется алгоритмом актора-критика с преимуществом (Advantage Actor-Critic). Актором здесь называется компонента, которая оптимизирует стратегию, а критиком — компонента, которая подсчитывает ценности состояний . Актор определяет дальнейшее действие, а критик оценивает, насколько то или иное действие выгодно, основываясь на функции преимущества (advantage).
Алгоритм актора-критика считается гибридным, так как актор работает в соответствии с принципом policy gradient, а критик работает аналогично алгоритму Q-routing.
Асинхронный актор-критик (англ. Asynchronous Advantage Actor-Critic, A3C)
Проблема с обучением с подкреплением в онлайне заключается в том, что данные, поступающие на вход алгоритму обучения, сильно скоррелированы: каждое следующее состояние непосредственно зависит от предпринятых агентом действий. Обучение на сильно скоррелированных данных приводит к переобучению. Таким образом, для того, чтобы успешно обучить стратегию, обобщаемую на большое количество состояний среды, нам все еще необходимо обучаться на эпизодах из различных сценариев.
Одним из способов достичь этого является запуск множества агентов параллельно. Все агенты находятся в разных состояниях и выбирают различные конкретные действия согласно стохастической стратегии, тем самым достигается устранение корреляции между наблюдаемыми данными. Однако все агенты используют и оптимизируют один и тот же набор параметров .
Идея алгоритма асинхронного актора-критика заключается в том, чтобы запуститьагентов параллельно, при этом на каждом шаге каждый из агентов рассчитывает обновления для значений и . Однако, вместо того, чтобы просто продолжить работу, каждый агент обновляет и , общие для всех агентов. Перед обработкой каждого нового эпизода агент копирует текущие глобальные значения параметра и использует его, чтобы определить собственную стратегию на этот эпизод. Агенты не ждут, пока остальные агенты завершат обработку своих эпизодов, чтобы обновить глобальные параметры (отсюда асинхронный). Поэтому пока один из агентов обрабатывает один эпизод, глобальное значение может изменяться вследствие действий других агентов.
Реализация асинхронного актора-критика на основе нейронных сетей
В большинстве современных исследований стратегияи функция ценности задаются с помощью нейросетей. Каждая из функций может в принципе использовать отдельную нейросеть, но на практике чаще всего применяется совмещенная нейросеть с двумя выходными слоями — для стратегии и для функции ценности. Такой подход, как правило, приводит к лучшим результатам, так как функция ценности, вообще говоря, зависит от текущей стратегии.
Реализация алгоритма асинхронного актора-критика инициализирует глобальную нейросеть (master network) и запускает N дочерних процессов (workers), в каждом из которых агент взаимодействует со средой. Нейросеть каждого агента является копией материнской нейросети. Перед началом каждого эпизода веса из материнской нейросети заново копируются в нейросеть агента. Градиенты, посчитанные по агентской нейросети, применяются в итоге к материнской.
См. также
Ссылки
- Williams, Ronald J. "Simple statistical gradient-following algorithms for connectionist reinforcement learning." Machine learning 8.3-4 (1992): 229-256.
- Sutton, Richard S., et al. "Policy gradient methods for reinforcement learning with function approximation." Advances in neural information processing systems. 2000.
- Policy Gradients. CS 294-112: Deep Reinforcement Learning, Sergey Levine.
- Actor-Critic Algorithms. CS 294-112: Deep Reinforcement Learning, Sergey Levine.
- Simple Reinforcement Learning with Tensorflow Part 8: Asynchronous Actor-Critic Agents (A3C)