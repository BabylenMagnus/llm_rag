Обучение с подкреплением
|Определение:
|Обучение с подкреплением (англ. reinforcement learning) — способ машинного обучения, при котором система обучается, взаимодействуя с некоторой средой.
Содержание
- 1 Обучение с подкреплением
- 2 Алгоритмы
- 3 Задача о многоруком бандите (The multi-armed bandit problem)
- 4 Q-learning
- 5 Ссылки
Обучение с подкреплением
В обучении с подкреплением существует агент (agent) взаимодействует с окружающей средой (environment), предпринимая действия (actions). Окружающая среда дает награду (reward) за эти действия, а агент продолжает их предпринимать.
Алгоритмы с частичным обучением пытаются найти стратегию, приписывающую состояниям (states) окружающей среды действия, одно из которых может выбрать агент в этих состояниях.
Среда обычно формулируется как марковский процесс принятия решений (МППР) с конечным множеством состояний, и в этом смысле алгоритмы обучения с подкреплением тесно связаны с динамическим программированием. Вероятности выигрышей и перехода состояний в МППР обычно являются величинами случайными, но стационарными в рамках задачи.
При обучении с подкреплением, в отличии от обучения с учителем, не предоставляются верные пары "входные данные-ответ", а принятие субоптимальнх решений (дающих локальный экстремум) не ограничивается явно. Обучение с подкреплением пытается найти компромисс между исследованием неизученных областей и применением имеющихся знаний (exploration vs exploitation). Баланс изучения-применения при обучении с подкреплением исследуется в задаче о многоруком бандите.
Формально простейшая модель обучения с подкреплением состоит из:
- множества состояний окружения (states) ;
- множества действий (actions) ;
- множества вещественнозначных скалярных "выигрышей" (rewards).
В произвольный момент времениагент характеризуется состоянием и множеством возможных действий . Выбирая действие , он переходит в состояние и получает выигрыш . Основываясь на таком взаимодействии с окружающей средой, агент, обучающийся с подкреплением, должен выработать стратегию , которая максимизирует величину в случае МППР, имеющего терминальное состояние, или величину:
- ,
для МППР без терминальных состояний (где— дисконтирующий множитель для "предстоящего выигрыша").
Таким образом, обучение с подкреплением особенно хорошо подходит для решения задач, связанных с выбором между долгосрочной и краткосрочной выгодой.
Постановка задачи обучения с подкреплением
— множество состояний среды
Игра агента со средой:
- инициализация стратегии и состояния среды ;
- для всех
:
- агент выбирает действие ;
- среда генерирует награду и новое состояние ;
- агент корректирует стратегию .
Это марковский процесс принятия решений (МППР), если,
МППР называется финитным, если,
Алгоритмы
Теперь, когда была определена функция выигрыша, нужно определить алгоритм, который будет использоваться для нахождения стратегии, обеспечивающей наилучший результат.
Наивный подход к решению этой задачи подразумевает следующие шаги:
- опробовать все возможные стратегии;
- выбрать стратегию с наибольшим ожидаемым выигрышем.
Первая проблема такого подхода заключается в том, что количество доступных стратегий может быть очень велико или бесконечно. Вторая проблема возникает, если выигрыши стохастические — чтобы точно оценить выигрыш от каждой стратегии потребуется многократно применить каждую из них. Этих проблем можно избежать, если допустить некоторую структуризацию и, возможно, позволить результатам, полученным от пробы одной стратегии, влиять на оценку для другой. Двумя основными подходами для реализации этих идей являются оценка функций полезности и прямая оптимизация стратегий.
Подход с использованием функции полезности использует множество оценок ожидаемого выигрыша только для одной стратегии(либо текущей, либо оптимальной). При этом пытаются оценить либо ожидаемый выигрыш, начиная с состояния , при дальнейшем следовании стратегии ,
- ,
либо ожидаемый выигрыш, при принятии решенияв состоянии и дальнейшем соблюдении ,
- ,
Если для выбора оптимальной стратегии используется функция полезности, то оптимальные действия всегда можно выбрать как действия, максимизирующие полезность.
Если же мы пользуемся функцией, необходимо либо иметь модель окружения в виде вероятностей , что позволяет построить функцию полезности вида
- ,
либо применить т.н. метод исполнитель-критик, в котором модель делится на две части: критик, оценивающий полезность состояния, и исполнитель, выбирающий подходящее действие в каждом состоянии.
Имея фиксированную стратегию, оценить при можно просто усреднив непосредственные выигрыши. Наиболее очевидный способ оценки при — усреднить суммарный выигрыш после каждого состояния. Однако для этого требуется, чтобы МППР достиг терминального состояния (завершился).
Поэтому построение искомой оценки принеочевидно. Однако, можно заметить, что образуют рекурсивное уравнение Беллмана:
- ,
Подставляя имеющиеся оценки обучения с временными воздействиями (temporal difference (TD) learning). В простейшем случае и состояния, и действия дискретны и можно придерживаться табличных оценок для каждого состояния.и применяя метод градиентного спуска с квадратичной функцией ошибок, мы приходим к алгоритму
Другие похожие методы: Адаптивный эвристический критик (Adaptive Heuristic Critic, AHC), SARSA и Q-обучение (Q-learning).
Задача о многоруком бандите (The multi-armed bandit problem)
Формулировка
— множество возможных действий (ручек автомата),
— неизвестное распределение награды ,
— стратегия агента в момент .
Игра агента со средой:
- инициализация стратегии ;
- для всех
:
- агент выбирает действие (ручку) ;
- среда генерирует награду ;
- агент корректирует стратегию .
— средняя награда в t играх
, — ценность действия .
У нас есть автомат —-рукий бандит, на каждом шаге мы выбираем за какую из ручек автомата дернуть, т.е. множество действий .
Выбор действияна шаге влечет награду при этом есть случайная величина, распределение которой неизвестно.
Состояние среды у нас от шага к шагу не меняется, а значит множество состоянийтривиально, ни на что не влияет, поэтому его можно проигнорировать.
Для простоты будем полагать, что каждому действию соответствует некоторое распределение, которое не меняется со временем. Если бы мы знали эти распределения, то очевидная стратегия заключалась бы в том, чтобы подсчитать математическое ожидание для каждого из распределений, выбрать действие с максимальным математическим ожиданием и теперь совершать это действие на каждом шаге.
Проблема в том, что распределения неизвестны, однако можно оценить математическое ожидание некоторой случайной величиныc неизвестным распределением. Для экспериментов , оценка математического ожидания это среднее арифметическое результатов экспериментов:
,
Задача является модельной для понимания конфликта между exploitation-exploration.
Жадные и -жадные стратегии (greedy & -greedy)
Жадная (greedy) стратегия
- — сколько раз было выбрано действие ,
- — текущая оценка математического ожидания награды для действия .
На каждом шаге
- Выбираем действие с максимальной оценкой математического ожидания:
- ,
- Выполняем действие и получаем награду ;
- Обновляем оценку математического ожидания для действия :
- ,
- .
В чем проблема?
Пусть у нас есть "двурукий" бандит. Первая ручка всегда выдаёт награду равную 1, вторая всегда выдаёт 2. Действуя согласно жадной стратегии мы дёрнем в начале первую ручку, так как в начале оценки математических ожиданий равны нулю, увеличим её оценку до. В дальнейшем всегда будем выбирать первую ручку, а значит на каждом шаге будем получать на 1 меньше, чем могли бы.
В данном случае достаточно попробовать в начале каждую из ручек вместо того, чтобы фокусироваться только на одной. Но если награда случайная величина, то единичной попытки будет не достаточно. Поэтому модифицируем жадную стратегию следующим образом:
-жадная ( -greedy) стратегия
Введем параметр.
На каждом шаге
- Получим значение — случайной величины равномерно распределенной на отрезке ;
- Если , то выберем действие случайно и равновероятно, иначе как в жадной стратегии выберем действие с максимальной оценкой математического ожидания;
- Обновляем оценки так же как в жадной стратегии.
Если, то это обычная жадная стратегия. Однако если , то в отличии от жадной стратегии на каждом шаге с вероятностью присходит "исследование" случайных действий.
Стратегия Softmax
Основная идея алгоритма softmax — уменьшение потерь при исследовании за счёт более редкого выбора действий, которые небольшую награду в прошлом. Чтобы этого добиться для каждого действия вычисляется весовой коэффициент на базе которого происходит выбор действия. Чем больше, тем больше вероятность выбора :
,
— параметр, с помощью которого можно настраивать поведение алгоритма.
Пристратегия стремится к равномерной, то есть softmax будет меньше зависеть от значения выигрыша и выбирать действия более равномерно (exploration).
Пристратегия стремится к жадной, то есть алгоритм будет больше ориентироваться на известный средний выигрыш действий (exploitation).
Экспонента используется для того, чтобы данный вес был ненулевым даже у действий, награда от которых пока нулевая.
Эвристика: параметримеет смысл уменьшать со временем.
Метод UCB (upper confidence bound)
Предыдущие алгоритмы при принятии решения используют данные о среднем выигрыше. Проблема в том, что если действие даёт награду с какой-то вероятностью, то данные от наблюдений получаются шумные и мы можем неправильно определять самое выгодное действие.
Алгоритм верхнего доверительного интервала (upper confidence bound или UCB) — семейство алгоритмов, которые пытаются решить эту проблему, используя при выборе данные не только о среднем выигрыше, но и о том, насколько можно доверять значениям выигрыша.
Также как softmax в UCB при выборе действия используется весовой коэффициент, который представляет собой верхнюю границу доверительного интервала (upper confidence bound) значения выигрыша:
,
— бонусное значение, которые показывает, насколько недоисследовано действие по сравнению с остальными.
Доказательство здесь
В отличие от предыдущих алгоритмов UCB не использует в своей работе ни случайные числа для выбора действия, ни параметры, которыми можно влиять на его работу. В начале работы алгоритма каждое из действий выбирается по одному разу (для того чтобы можно было вычислить размер бонуса для всех действий). После этого в каждый момент времени выбирается действие с максимальным значением весового коэффициента.
Несмотря на это отсутствие случайности результаты работы этого алгоритма выглядят довольно шумно по сравнению с остальными. Это происходит из-за того, что данный алгоритм сравнительно часто выбирает недоисследованные действия.
Q-learning
На основе получаемого от среды вознаграждения агент формирует функцию полезности, что впоследствии дает ему возможность уже не случайно выбирать стратегию поведения, а учитывать опыт предыдущего взаимодействия со средой. Одно из преимуществ -обучения — то, что оно в состоянии сравнить ожидаемую полезность доступных действий, не формируя модели окружающей среды. Применяется для ситуаций, которые можно представить в виде МППР.
Таким образом, алгоритм это функция качества от состояния и действия:
- ,
Перед обучениеминициализируется случайными значениями. После этого в каждый момент времени агент выбирает действие , получает награду , переходит в новое состояние , которое может зависеть от предыдущего состояния и выбранного действия, и обновляет функцию . Обновление функции использует взвешенное среднее между старым и новым значениями:
- ,
гдеэто награда, полученная при переходе из состояния в состояние , и это скорость обучения ( ).
Алгоритм заканчивается, когда агент переходит в терминальное состояние.
Aлгоритм Q-learning
- — множество состояний,
- — множество действий,
- — функция награды,
- — функция перехода,
- — learning rate (обычно 0.1), чем он выше, тем сильнее агент доверяет новой информации,
- — discounting factor, чем он меньше, тем меньше агент задумывается о выгоде от будущих своих действий.
fun Q-learning(): for : for : Q(s, a) = rand() while Q is not converged: s = while s is not terminal: a = r = R(s, a) s' = T(s, a) s = s' return Q
Ссылки
- Wikipedia: Reinforcement learning
- Sutton, Richard S., and Andrew G. Barto. Introduction to reinforcement learning. Vol. 135. Cambridge: MIT press, 1998.
- Sutton R. S., Barto A. G. Reinforcement learning: An introduction. – 2011.
- Обучение с подкреплением
- Многорукий бандит
- Задача о многоруком бандите
- Обучение с подкреплением (Reinforcement Learning) К.В.Воронцов
- Обзор книги «Bandit Algorithms for Website Optimization»
- Q-learning
- An introduction to Q-Learning: reinforcement learning